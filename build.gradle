plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '2.25.0'
}

repositories {
    mavenCentral()
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'

    String javaFxVersion = '21'

    implementation "org.openjfx:javafx-base:${javaFxVersion}"
    implementation "org.openjfx:javafx-controls:${javaFxVersion}"
    implementation "org.openjfx:javafx-fxml:${javaFxVersion}"
    implementation "org.openjfx:javafx-graphics:${javaFxVersion}"

    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'

    // If you're mocking final/static classes or using inline mocking
    testImplementation 'org.mockito:mockito-inline:5.2.0' // Optional, only if needed

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

application {
    mainClass = 'ui.Launcher'
}

// Create a Launcher class that will be used to start the application
task createLauncher {
    doLast {
        def launcherFile = new File("${projectDir}/src/main/java/ui/Launcher.java")
        launcherFile.parentFile.mkdirs()
        launcherFile.text = """
package ui;

public class Launcher {
    public static void main(String[] args) {
        LibraryApp.main(args);
    }
}
"""
    }
}

compileJava.dependsOn createLauncher

shadowJar {
    archiveBaseName = "LibraryManagementSystem"
    archiveClassifier = null
    manifest {
        attributes 'Main-Class': 'ui.Launcher'
    }
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'LibraryManagementSystem'
    }
    jpackage {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
    }
}

run {
    standardInput = System.in
}
